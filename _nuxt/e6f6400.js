/*! For license information please see LICENSES */
(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{257:function(t,e,n){var o;void 0===(o=function(){return t=function(t,sub){return t.substring(0,sub.length)===sub},e=function(t,sub){return t.substring(t.length-sub.length)===sub},(n=function(t){return t instanceof n?t:this instanceof n?void(this._wrapped=t):new n(t)}).delimiter=" ",n.isArray=function(t){return!(!t||t.constructor!==Array)},n.trim=function(n,sub){for(sub=sub||" ";t(n,sub);)n=n.substring(1);for(;e(n,sub);)n=n.substring(0,n.length-1);return n},n.Wkt=function(t){this.delimiter=n.delimiter||" ",this.wrapVertices=!0,this.regExes={typeStr:/^\s*(\w+)\s*\(\s*(.*)\s*\)\s*$/,spaces:/\s+|\+/,numeric:/-*\d+(\.*\d+)?/,comma:/\s*,\s*/,parenComma:/\)\s*,\s*\(/,coord:/-*\d+\.*\d+ -*\d+\.*\d+/,doubleParenComma:/\)\s*\)\s*,\s*\(\s*\(/,ogcTypes:/^(multi)?(point|line|polygon|box)?(string)?$/i,crudeJson:/^{.*"(type|coordinates|geometries|features)":.*}$/},this._stripWhitespaceAndParens=function(t){return t.trim().replace(/^\(?(.*?)\)?$/,"$1")},this.components=void 0,t&&"string"==typeof t?this.read(t):t&&void 0!==typeof t&&this.fromObject(t)},n.Wkt.prototype.isCollection=function(){switch(this.type.slice(0,5)){case"multi":case"polyg":return!0;default:return!1}},n.Wkt.prototype.sameCoords=function(a,b){return a.x===b.x&&a.y===b.y},n.Wkt.prototype.fromObject=function(t){var e;return e=t.hasOwnProperty("type")&&t.hasOwnProperty("coordinates")?this.fromJson(t):this.deconstruct.call(this,t),this.components=e.components,this.isRectangle=e.isRectangle||!1,this.type=e.type,this},n.Wkt.prototype.toObject=function(t){var e=this.construct[this.type].call(this,t);return"object"!=typeof e||n.isArray(e)||(e.properties=this.properties),e},n.Wkt.prototype.toString=function(t){return this.write()},n.Wkt.prototype.fromJson=function(t){var i,e,o,r,h,c;if(this.type=t.type.toLowerCase(),this.components=[],t.hasOwnProperty("geometry"))return this.fromJson(t.geometry),this.properties=t.properties,this;if(r=t.coordinates,n.isArray(r[0])){for(i in r)if(r.hasOwnProperty(i))if(n.isArray(r[i][0])){for(e in c=[],r[i])if(r[i].hasOwnProperty(e))if(n.isArray(r[i][e][0])){for(o in h=[],r[i][e])r[i][e].hasOwnProperty(o)&&h.push({x:r[i][e][o][0],y:r[i][e][o][1]});c.push(h)}else c.push({x:r[i][e][0],y:r[i][e][1]});this.components.push(c)}else"multipoint"===this.type?this.components.push([{x:r[i][0],y:r[i][1]}]):this.components.push({x:r[i][0],y:r[i][1]})}else this.components.push({x:r[0],y:r[1]});return this},n.Wkt.prototype.toJson=function(){var t,e,i,o,r,h,c;if(t=this.components,e={coordinates:[],type:function(){var i,t,s;for(i in s=[],t=this.regExes.ogcTypes.exec(this.type).slice(1))t.hasOwnProperty(i)&&void 0!==t[i]&&s.push(t[i].toLowerCase().slice(0,1).toUpperCase()+t[i].toLowerCase().slice(1));return s}.call(this).join("")},"box"===this.type.toLowerCase()){for(i in e.type="Polygon",e.bbox=[],t)t.hasOwnProperty(i)&&(e.bbox=e.bbox.concat([t[i].x,t[i].y]));return e.coordinates=[[[t[0].x,t[0].y],[t[0].x,t[1].y],[t[1].x,t[1].y],[t[1].x,t[0].y],[t[0].x,t[0].y]]],e}for(i in t)if(t.hasOwnProperty(i))if(n.isArray(t[i])){for(o in c=[],t[i])if(t[i].hasOwnProperty(o))if(n.isArray(t[i][o])){for(r in h=[],t[i][o])t[i][o].hasOwnProperty(r)&&h.push([t[i][o][r].x,t[i][o][r].y]);c.push(h)}else t[i].length>1?c.push([t[i][o].x,t[i][o].y]):c=c.concat([t[i][o].x,t[i][o].y]);e.coordinates.push(c)}else t.length>1?e.coordinates.push([t[i].x,t[i].y]):e.coordinates=e.coordinates.concat([t[i].x,t[i].y]);return e},n.Wkt.prototype.merge=function(t){var e=this.type.slice(0,5);if(this.type!==t.type&&this.type.slice(5,this.type.length)!==t.type)throw TypeError("The input geometry types must agree or the calling this.Wkt.Wkt instance must be a multigeometry of the other");switch(e){case"point":this.components=[this.components.concat(t.components)];break;case"multi":this.components=this.components.concat("multi"===t.type.slice(0,5)?t.components:[t.components]);break;default:this.components=[this.components,t.components]}return"multi"!==e&&(this.type="multi"+this.type),this},n.Wkt.prototype.read=function(t){var e;if(e=this.regExes.typeStr.exec(t))this.type=e[1].toLowerCase(),this.base=e[2],this.ingest[this.type]&&(this.components=this.ingest[this.type].apply(this,[this.base]));else{if(!this.regExes.crudeJson.test(t))throw console.log("Invalid WKT string provided to read()"),{name:"WKTError",message:"Invalid WKT string provided to read()"};if("object"!=typeof JSON||"function"!=typeof JSON.parse)throw console.log("JSON.parse() is not available; cannot parse GeoJSON strings"),{name:"JSONError",message:"JSON.parse() is not available; cannot parse GeoJSON strings"};this.fromJson(JSON.parse(t))}return this},n.Wkt.prototype.write=function(t){var i,e,data;for(t=t||this.components,(e=[]).push(this.type.toUpperCase()+"("),i=0;i<t.length;i+=1){if(this.isCollection()&&i>0&&e.push(","),!this.extract[this.type])return null;data=this.extract[this.type].apply(this,[t[i]]),this.isCollection()&&"multipoint"!==this.type?e.push("("+data+")"):(e.push(data),i!==t.length-1&&"multipoint"!==this.type&&e.push(","))}return e.push(")"),e.join("")},n.Wkt.prototype.extract={point:function(t){return String(t.x)+this.delimiter+String(t.y)},multipoint:function(t){var i,s,e=[];for(i=0;i<t.length;i+=1)s=this.extract.point.apply(this,[t[i]]),this.wrapVertices&&(s="("+s+")"),e.push(s);return e.join(",")},linestring:function(t){return this.extract.point.apply(this,[t])},multilinestring:function(t){var i,e=[];if(t.length)for(i=0;i<t.length;i+=1)e.push(this.extract.linestring.apply(this,[t[i]]));else e.push(this.extract.point.apply(this,[t]));return e.join(",")},polygon:function(polygon){return this.extract.multilinestring.apply(this,[polygon])},multipolygon:function(t){var i,e=[];for(i=0;i<t.length;i+=1)e.push("("+this.extract.polygon.apply(this,[t[i]])+")");return e.join(",")},box:function(t){return this.extract.linestring.apply(this,[t])},geometrycollection:function(t){console.log("The geometrycollection WKT type is not yet supported.")}},n.Wkt.prototype.ingest={point:function(t){var e=n.trim(t).split(this.regExes.spaces);return[{x:parseFloat(this.regExes.numeric.exec(e[0])[0]),y:parseFloat(this.regExes.numeric.exec(e[1])[0])}]},multipoint:function(t){var i,e,o;for(e=[],o=n.trim(t).split(this.regExes.comma),i=0;i<o.length;i+=1)e.push(this.ingest.point.apply(this,[o[i]]));return e},linestring:function(t){var i,e,n;for(e=this.ingest.multipoint.apply(this,[t]),n=[],i=0;i<e.length;i+=1)n=n.concat(e[i]);return n},multilinestring:function(t){var i,e,line,o;for(e=[],1===(o=n.trim(t).split(this.regExes.doubleParenComma)).length&&(o=n.trim(t).split(this.regExes.parenComma)),i=0;i<o.length;i+=1)line=this._stripWhitespaceAndParens(o[i]),e.push(this.ingest.linestring.apply(this,[line]));return e},polygon:function(t){var i,e,o,r,h,c;for(c=n.trim(t).split(this.regExes.parenComma),o=[],i=0;i<c.length;i+=1){for(h=this._stripWhitespaceAndParens(c[i]).split(this.regExes.comma),r=[],e=0;e<h.length;e+=1){var l=h[e].split(this.regExes.spaces);if(l.length>2&&(l=l.filter((function(t){return""!=t}))),2===l.length){var y=l[0],m=l[1];r.push({x:parseFloat(y),y:parseFloat(m)})}}o.push(r)}return o},box:function(t){var i,e,n;for(e=this.ingest.multipoint.apply(this,[t]),n=[],i=0;i<e.length;i+=1)n=n.concat(e[i]);return n},multipolygon:function(t){var i,e,polygon,o;for(e=[],o=n.trim(t).split(this.regExes.doubleParenComma),i=0;i<o.length;i+=1)polygon=this._stripWhitespaceAndParens(o[i]),e.push(this.ingest.polygon.apply(this,[polygon]));return e},geometrycollection:function(t){console.log("The geometrycollection WKT type is not yet supported.")}},n;var t,e,n}.call(e,n,e,t))||(t.exports=o)}}]);